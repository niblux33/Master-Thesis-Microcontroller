
CPUFeedingV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  00006164  2**0
                  CONTENTS
  4 .ARM          00000008  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d7c  08004d7c  00006164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004d84  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000024  08004da8  00006024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c4  08004e48  000060c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000700  20000168  08004ee8  00006168  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000868  08004ee8  00006868  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016ea7  00000000  00000000  00006192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aa3  00000000  00000000  0001d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  0001fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eb8  00000000  00000000  00020db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002981c  00000000  00000000  00021c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016295  00000000  00000000  0004b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010455f  00000000  00000000  00061719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00165c78  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050bc  00000000  00000000  00165cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  0016ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000168 	.word	0x20000168
 8000214:	00000000 	.word	0x00000000
 8000218:	08004d44 	.word	0x08004d44

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000016c 	.word	0x2000016c
 8000234:	08004d44 	.word	0x08004d44

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b090      	sub	sp, #64	@ 0x40
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fe4c 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f891 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f9f9 	bl	800092c <MX_GPIO_Init>
  MX_ETH_Init();
 800053a:	f000 f8ff 	bl	800073c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800053e:	f000 f997 	bl	8000870 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000542:	f000 f9c5 	bl	80008d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000546:	f000 f947 	bl	80007d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Start timer with interrupt
 800054a:	483b      	ldr	r0, [pc, #236]	@ (8000638 <main+0x110>)
 800054c:	f003 f802 	bl	8003554 <HAL_TIM_Base_Start_IT>
  uint32_t last_pulse = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pulse_delay = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sample_time = SAMPLE_TIME;
 8000558:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800055c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t last_sample = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t last_blink =0;
 8000562:	2300      	movs	r3, #0
 8000564:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t blink_delay = 10000;
 8000566:	f242 7310 	movw	r3, #10000	@ 0x2710
 800056a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t current_time = interrupt_time;
 800056c:	4b33      	ldr	r3, [pc, #204]	@ (800063c <main+0x114>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
	  uint32_t delta_pulse = current_time - last_pulse;
 8000572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	623b      	str	r3, [r7, #32]
	  uint32_t delta_sample = current_time - last_sample;
 800057a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800057c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	61fb      	str	r3, [r7, #28]
	  uint32_t delta_blink = current_time - last_blink;
 8000582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	61bb      	str	r3, [r7, #24]
	  if(delta_pulse >= pulse_delay){
 800058a:	6a3a      	ldr	r2, [r7, #32]
 800058c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800058e:	429a      	cmp	r2, r3
 8000590:	d303      	bcc.n	800059a <main+0x72>
		  last_pulse = current_time;
 8000592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000594:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  pulse();
 8000596:	f000 fad3 	bl	8000b40 <pulse>
	  }
	  if(delta_sample >= sample_time){
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800059e:	429a      	cmp	r2, r3
 80005a0:	d33e      	bcc.n	8000620 <main+0xf8>

		  last_sample = current_time;
 80005a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
		  double feedback = read_feedback_speed();
 80005a6:	f000 fb53 	bl	8000c50 <read_feedback_speed>
 80005aa:	ed87 0b04 	vstr	d0, [r7, #16]
		  if (pi_enabled) {
 80005ae:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <main+0x118>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d02b      	beq.n	8000610 <main+0xe8>
			  double error = v_feed - feedback;
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <main+0x11c>)
 80005ba:	ed93 6b00 	vldr	d6, [r3]
 80005be:	ed97 7b04 	vldr	d7, [r7, #16]
 80005c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80005c6:	ed87 7b02 	vstr	d7, [r7, #8]
			  integral += error;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <main+0x120>)
 80005cc:	ed93 6b00 	vldr	d6, [r3]
 80005d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80005d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <main+0x120>)
 80005da:	ed83 7b00 	vstr	d7, [r3]
			  double output = Kp * error + Ki * integral;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <main+0x124>)
 80005e0:	ed93 6b00 	vldr	d6, [r3]
 80005e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80005e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <main+0x128>)
 80005ee:	ed93 5b00 	vldr	d5, [r3]
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <main+0x120>)
 80005f4:	ed93 7b00 	vldr	d7, [r3]
 80005f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80005fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000600:	ed87 7b00 	vstr	d7, [r7]
			  pulse_delay = calculate_pulse_delay(output);
 8000604:	ed97 0b00 	vldr	d0, [r7]
 8000608:	f000 fac2 	bl	8000b90 <calculate_pulse_delay>
 800060c:	63b8      	str	r0, [r7, #56]	@ 0x38
 800060e:	e007      	b.n	8000620 <main+0xf8>
		  } else {
			  pulse_delay = calculate_pulse_delay(v_feed);
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <main+0x11c>)
 8000612:	ed93 7b00 	vldr	d7, [r3]
 8000616:	eeb0 0b47 	vmov.f64	d0, d7
 800061a:	f000 fab9 	bl	8000b90 <calculate_pulse_delay>
 800061e:	63b8      	str	r0, [r7, #56]	@ 0x38
		  }
	  }
	  if(delta_blink >= blink_delay){
 8000620:	69ba      	ldr	r2, [r7, #24]
 8000622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000624:	429a      	cmp	r2, r3
 8000626:	d3a1      	bcc.n	800056c <main+0x44>
		  last_blink = current_time;
 8000628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800062c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000630:	4808      	ldr	r0, [pc, #32]	@ (8000654 <main+0x12c>)
 8000632:	f001 fc60 	bl	8001ef6 <HAL_GPIO_TogglePin>
  {
 8000636:	e799      	b.n	800056c <main+0x44>
 8000638:	2000026c 	.word	0x2000026c
 800063c:	20000848 	.word	0x20000848
 8000640:	20000858 	.word	0x20000858
 8000644:	20000000 	.word	0x20000000
 8000648:	20000850 	.word	0x20000850
 800064c:	20000008 	.word	0x20000008
 8000650:	20000010 	.word	0x20000010
 8000654:	40020400 	.word	0x40020400

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fb40 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067c:	f001 fdb6 	bl	80021ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <SystemClock_Config+0xdc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemClock_Config+0xe0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a25      	ldr	r2, [pc, #148]	@ (8000738 <SystemClock_Config+0xe0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemClock_Config+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006cc:	2360      	movs	r3, #96	@ 0x60
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fde3 	bl	80022ac <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 fb02 	bl	8000cf4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f0:	f001 fd8c 	bl	800220c <HAL_PWREx_EnableOverDrive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fa:	f000 fafb 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2103      	movs	r1, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f874 	bl	8002808 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000726:	f000 fae5 	bl	8000cf4 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_ETH_Init+0x84>)
 8000742:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <MX_ETH_Init+0x88>)
 8000744:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000746:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ETH_Init+0x8c>)
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_ETH_Init+0x8c>)
 8000754:	22e1      	movs	r2, #225	@ 0xe1
 8000756:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_ETH_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_ETH_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_ETH_Init+0x84>)
 800076c:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <MX_ETH_Init+0x8c>)
 800076e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_ETH_Init+0x84>)
 8000772:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000776:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_ETH_Init+0x84>)
 800077a:	4a14      	ldr	r2, [pc, #80]	@ (80007cc <MX_ETH_Init+0x90>)
 800077c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_ETH_Init+0x84>)
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_ETH_Init+0x94>)
 8000782:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_ETH_Init+0x84>)
 8000786:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800078a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ETH_Init+0x84>)
 800078e:	f000 feaf 	bl	80014f0 <HAL_ETH_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 faac 	bl	8000cf4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800079c:	2238      	movs	r2, #56	@ 0x38
 800079e:	2100      	movs	r1, #0
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <MX_ETH_Init+0x98>)
 80007a2:	f004 faa3 	bl	8004cec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_ETH_Init+0x98>)
 80007a8:	2221      	movs	r2, #33	@ 0x21
 80007aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_ETH_Init+0x98>)
 80007ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_ETH_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001bc 	.word	0x200001bc
 80007c4:	40028000 	.word	0x40028000
 80007c8:	2000085c 	.word	0x2000085c
 80007cc:	200000c4 	.word	0x200000c4
 80007d0:	20000024 	.word	0x20000024
 80007d4:	20000184 	.word	0x20000184

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_TIM2_Init+0x94>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_TIM2_Init+0x94>)
 8000800:	2240      	movs	r2, #64	@ 0x40
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_TIM2_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_TIM2_Init+0x94>)
 800080c:	2295      	movs	r2, #149	@ 0x95
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_TIM2_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_TIM2_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <MX_TIM2_Init+0x94>)
 800081e:	f002 fe41 	bl	80034a4 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000828:	f000 fa64 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_TIM2_Init+0x94>)
 800083a:	f003 f823 	bl	8003884 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 fa56 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_TIM2_Init+0x94>)
 8000856:	f003 fa41 	bl	8003cdc <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 fa48 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000026c 	.word	0x2000026c

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_USART3_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART3_UART_Init+0x58>)
 80008b4:	f003 fabe 	bl	8003e34 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 fa19 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002b8 	.word	0x200002b8
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2206      	movs	r2, #6
 80008e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2201      	movs	r2, #1
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	f001 fb22 	bl	8001f5c <HAL_PCD_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f9e9 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000340 	.word	0x20000340

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b6f      	ldr	r3, [pc, #444]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a6e      	ldr	r2, [pc, #440]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b6c      	ldr	r3, [pc, #432]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b69      	ldr	r3, [pc, #420]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a68      	ldr	r2, [pc, #416]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b66      	ldr	r3, [pc, #408]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b63      	ldr	r3, [pc, #396]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a62      	ldr	r2, [pc, #392]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b60      	ldr	r3, [pc, #384]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a5c      	ldr	r2, [pc, #368]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b5a      	ldr	r3, [pc, #360]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b57      	ldr	r3, [pc, #348]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a56      	ldr	r2, [pc, #344]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b54      	ldr	r3, [pc, #336]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b51      	ldr	r3, [pc, #324]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a50      	ldr	r2, [pc, #320]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	4b4b      	ldr	r3, [pc, #300]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a4a      	ldr	r2, [pc, #296]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b48      	ldr	r3, [pc, #288]	@ (8000b00 <MX_GPIO_Init+0x1d4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUL_GPIO_Port, PUL_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	4845      	ldr	r0, [pc, #276]	@ (8000b04 <MX_GPIO_Init+0x1d8>)
 80009f0:	f001 fa68 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009fa:	4843      	ldr	r0, [pc, #268]	@ (8000b08 <MX_GPIO_Init+0x1dc>)
 80009fc:	f001 fa62 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2140      	movs	r1, #64	@ 0x40
 8000a04:	4841      	ldr	r0, [pc, #260]	@ (8000b0c <MX_GPIO_Init+0x1e0>)
 8000a06:	f001 fa5d 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	483b      	ldr	r0, [pc, #236]	@ (8000b10 <MX_GPIO_Init+0x1e4>)
 8000a22:	f001 f88b 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTA_Pin INTB_Pin */
  GPIO_InitStruct.Pin = INTA_Pin|INTB_Pin;
 8000a26:	2330      	movs	r3, #48	@ 0x30
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4832      	ldr	r0, [pc, #200]	@ (8000b04 <MX_GPIO_Init+0x1d8>)
 8000a3c:	f001 f87e 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUL_Pin */
  GPIO_InitStruct.Pin = PUL_Pin;
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PUL_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	482b      	ldr	r0, [pc, #172]	@ (8000b04 <MX_GPIO_Init+0x1d8>)
 8000a58:	f001 f870 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : COM1_Pin */
  GPIO_InitStruct.Pin = COM1_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4828      	ldr	r0, [pc, #160]	@ (8000b10 <MX_GPIO_Init+0x1e4>)
 8000a70:	f001 f864 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a74:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <MX_GPIO_Init+0x1dc>)
 8000a8e:	f001 f855 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a92:	2340      	movs	r3, #64	@ 0x40
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4818      	ldr	r0, [pc, #96]	@ (8000b0c <MX_GPIO_Init+0x1e0>)
 8000aaa:	f001 f847 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <MX_GPIO_Init+0x1e0>)
 8000ac2:	f001 f83b 	bl	8001b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200a      	movs	r0, #10
 8000acc:	f000 fcd9 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f000 fcf2 	bl	80014ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2017      	movs	r0, #23
 8000adc:	f000 fcd1 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae0:	2017      	movs	r0, #23
 8000ae2:	f000 fcea 	bl	80014ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2028      	movs	r0, #40	@ 0x28
 8000aec:	f000 fcc9 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af0:	2028      	movs	r0, #40	@ 0x28
 8000af2:	f000 fce2 	bl	80014ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	@ 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40021400 	.word	0x40021400
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b24:	d104      	bne.n	8000b30 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	interrupt_time++;
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b2e:	6013      	str	r3, [r2, #0]
    }
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000848 	.word	0x20000848

08000b40 <pulse>:

void pulse() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(COM1_GPIO_Port, COM1_Pin)){
 8000b46:	2104      	movs	r1, #4
 8000b48:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <pulse+0x44>)
 8000b4a:	f001 f9a3 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d112      	bne.n	8000b7a <pulse+0x3a>
	    HAL_GPIO_WritePin(PUL_GPIO_Port, PUL_Pin,GPIO_PIN_SET); // Set pulse pin high
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <pulse+0x48>)
 8000b5a:	f001 f9b3 	bl	8001ec4 <HAL_GPIO_WritePin>
	    uint32_t start = interrupt_time;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <pulse+0x4c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	607b      	str	r3, [r7, #4]
	    while ((interrupt_time - start) < 1); // Wait ( one tick is 0.1 ms)
 8000b64:	bf00      	nop
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <pulse+0x4c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d0fa      	beq.n	8000b66 <pulse+0x26>
	    HAL_GPIO_WritePin(PUL_GPIO_Port, PUL_Pin, GPIO_PIN_RESET); // Set pulse pin low
 8000b70:	2200      	movs	r2, #0
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <pulse+0x48>)
 8000b76:	f001 f9a5 	bl	8001ec4 <HAL_GPIO_WritePin>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40021400 	.word	0x40021400
 8000b8c:	20000848 	.word	0x20000848

08000b90 <calculate_pulse_delay>:


uint32_t calculate_pulse_delay(double v_feed)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0b00 	vstr	d0, [r7]
	double pulse_delay =  (1 / v_feed) * C_pps;
 8000b9a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8000b9e:	ed97 6b00 	vldr	d6, [r7]
 8000ba2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ba6:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8000bd0 <calculate_pulse_delay+0x40>
 8000baa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bae:	ed87 7b02 	vstr	d7, [r7, #8]
    return (uint32_t)pulse_delay;
 8000bb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8000bb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bba:	ee17 3a90 	vmov	r3, s15
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	beccb2bb 	.word	0xbeccb2bb
 8000bd4:	400c463a 	.word	0x400c463a

08000bd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == USER_Btn_Pin){
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be8:	d10e      	bne.n	8000c08 <HAL_GPIO_EXTI_Callback+0x30>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bea:	2180      	movs	r1, #128	@ 0x80
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <HAL_GPIO_EXTI_Callback+0x64>)
 8000bee:	f001 f982 	bl	8001ef6 <HAL_GPIO_TogglePin>
	  pi_enabled = !pi_enabled; // Toggle the PI regulation flag
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x68>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c06:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == INTA_Pin){
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d112      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x5c>
	int8_t encoder_direction;

	// Determine direction of rotation by checking state of INTB
	if (HAL_GPIO_ReadPin(GPIOF, INTB_Pin) == GPIO_PIN_SET)
 8000c0e:	2120      	movs	r1, #32
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c12:	f001 f93f 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		encoder_direction = 1; // Clockwise rotation
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_EXTI_Callback+0x4e>
	}
	else
	{
		encoder_direction = -1; // Counter-clockwise rotation
 8000c22:	23ff      	movs	r3, #255	@ 0xff
 8000c24:	73fb      	strb	r3, [r7, #15]
	}
	encoder_counter += encoder_direction;
 8000c26:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c32:	6013      	str	r3, [r2, #0]
	}

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	20000858 	.word	0x20000858
 8000c44:	40021400 	.word	0x40021400
 8000c48:	2000084c 	.word	0x2000084c
 8000c4c:	00000000 	.word	0x00000000

08000c50 <read_feedback_speed>:

// Calculate the actual feed speed
double read_feedback_speed()
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
    double vFeedActual = 0.0;
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	e9c7 2300 	strd	r2, r3, [r7]
    if (encoder_counter != 0)
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <read_feedback_speed+0xa0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d01f      	beq.n	8000caa <read_feedback_speed+0x5a>
    {
        vFeedActual = 2 * M_PI * R_enc * PPR_enc * SAMPLE_TIME * 1e-3 / (60 * encoder_counter);
 8000c6a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000cc8 <read_feedback_speed+0x78>
 8000c6e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8000cd0 <read_feedback_speed+0x80>
 8000c72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c76:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000cd8 <read_feedback_speed+0x88>
 8000c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c7e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000ce0 <read_feedback_speed+0x90>
 8000c82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c86:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000ce8 <read_feedback_speed+0x98>
 8000c8a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <read_feedback_speed+0xa0>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4613      	mov	r3, r2
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ca2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ca6:	ed87 7b00 	vstr	d7, [r7]
    }
    encoder_counter = 0;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <read_feedback_speed+0xa0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
    return vFeedActual;
 8000cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cb4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	70a3d70a 	.word	0x70a3d70a
 8000ccc:	3fa70a3d 	.word	0x3fa70a3d
 8000cd0:	54442d18 	.word	0x54442d18
 8000cd4:	401921fb 	.word	0x401921fb
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	40890000 	.word	0x40890000
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	407f4000 	.word	0x407f4000
 8000ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000cec:	3f50624d 	.word	0x3f50624d
 8000cf0:	2000084c 	.word	0x2000084c

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <Error_Handler+0x8>

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	@ 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea0 <HAL_ETH_MspInit+0x158>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	f040 8096 	bne.w	8000e98 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	4b47      	ldr	r3, [pc, #284]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	4a46      	ldr	r2, [pc, #280]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d90:	4b44      	ldr	r3, [pc, #272]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	4b41      	ldr	r3, [pc, #260]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	4a40      	ldr	r2, [pc, #256]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000da2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a34      	ldr	r2, [pc, #208]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e08:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <HAL_ETH_MspInit+0x15c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e14:	2332      	movs	r3, #50	@ 0x32
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481e      	ldr	r0, [pc, #120]	@ (8000ea8 <HAL_ETH_MspInit+0x160>)
 8000e30:	f000 fe84 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e34:	2386      	movs	r3, #134	@ 0x86
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e44:	230b      	movs	r3, #11
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4817      	ldr	r0, [pc, #92]	@ (8000eac <HAL_ETH_MspInit+0x164>)
 8000e50:	f000 fe74 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e66:	230b      	movs	r3, #11
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <HAL_ETH_MspInit+0x168>)
 8000e72:	f000 fe63 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e76:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	230b      	movs	r3, #11
 8000e8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <HAL_ETH_MspInit+0x16c>)
 8000e94:	f000 fe52 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40028000 	.word	0x40028000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40021800 	.word	0x40021800

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec8:	d113      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201c      	movs	r0, #28
 8000ee8:	f000 facb 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eec:	201c      	movs	r0, #28
 8000eee:	f000 fae4 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	@ 0xb8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2290      	movs	r2, #144	@ 0x90
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fee3 	bl	8004cec <memset>
  if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <HAL_UART_MspInit+0xb4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13c      	bne.n	8000faa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fe88 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff fed3 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_UART_MspInit+0xbc>)
 8000fa6:	f000 fdc9 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	37b8      	adds	r7, #184	@ 0xb8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	@ 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fe83 	bl	8004cec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fee:	d159      	bne.n	80010a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ff0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe27 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff fe72 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001014:	4a25      	ldr	r2, [pc, #148]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	@ 0x30
 800101c:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001028:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001042:	230a      	movs	r3, #10
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001050:	f000 fd74 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001070:	f000 fd64 	bl	8001b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 800107a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800107e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6453      	str	r3, [r2, #68]	@ 0x44
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <HAL_PCD_MspInit+0xec>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	37b8      	adds	r7, #184	@ 0xb8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f89b 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTA_Pin);
 8001116:	2010      	movs	r0, #16
 8001118:	f000 ff08 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTB_Pin);
 8001124:	2020      	movs	r0, #32
 8001126:	f000 ff01 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f002 fa85 	bl	8003644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000026c 	.word	0x2000026c

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001148:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800114c:	f000 feee 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	@ (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 fda9 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff f9bd 	bl	8000528 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011bc:	08004d84 	.word	0x08004d84
  ldr r2, =_sbss
 80011c0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80011c4:	20000868 	.word	0x20000868

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>

080011ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f94c 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f805 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd91 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f967 	bl	80014d6 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f92f 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000018 	.word	0x20000018
 800123c:	20000020 	.word	0x20000020
 8001240:	2000001c 	.word	0x2000001c

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000020 	.word	0x20000020
 8001268:	20000864 	.word	0x20000864

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000864 	.word	0x20000864

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000020 	.word	0x20000020

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	@ (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	@ (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06a      	b.n	80015d8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2223      	movs	r2, #35	@ 0x23
 8001510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fc17 	bl	8000d48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_ETH_Init+0xf0>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <HAL_ETH_Init+0xf0>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <HAL_ETH_Init+0xf0>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001532:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <HAL_ETH_Init+0xf4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <HAL_ETH_Init+0xf4>)
 8001538:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800153c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <HAL_ETH_Init+0xf4>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4927      	ldr	r1, [pc, #156]	@ (80015e4 <HAL_ETH_Init+0xf4>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800154c:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <HAL_ETH_Init+0xf4>)
 800154e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001566:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001568:	f7ff fe80 	bl	800126c <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800156e:	e011      	b.n	8001594 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001570:	f7ff fe7c 	bl	800126c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800157e:	d909      	bls.n	8001594 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2204      	movs	r2, #4
 8001584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	22e0      	movs	r2, #224	@ 0xe0
 800158c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e021      	b.n	80015d8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1e4      	bne.n	8001570 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f958 	bl	800185c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f9ff 	bl	80019b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fa55 	bl	8001a62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	461a      	mov	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f9bd 	bl	8001940 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2210      	movs	r2, #16
 80015d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800

080015e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4b51      	ldr	r3, [pc, #324]	@ (8001744 <ETH_SetMACConfig+0x15c>)
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7c1b      	ldrb	r3, [r3, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <ETH_SetMACConfig+0x28>
 800160a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800160e:	e000      	b.n	8001612 <ETH_SetMACConfig+0x2a>
 8001610:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7c5b      	ldrb	r3, [r3, #17]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <ETH_SetMACConfig+0x38>
 800161a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800161e:	e000      	b.n	8001622 <ETH_SetMACConfig+0x3a>
 8001620:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001622:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001628:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	7fdb      	ldrb	r3, [r3, #31]
 800162e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001630:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001636:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	7f92      	ldrb	r2, [r2, #30]
 800163c:	2a00      	cmp	r2, #0
 800163e:	d102      	bne.n	8001646 <ETH_SetMACConfig+0x5e>
 8001640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001644:	e000      	b.n	8001648 <ETH_SetMACConfig+0x60>
 8001646:	2200      	movs	r2, #0
                        macconf->Speed |
 8001648:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	7f1b      	ldrb	r3, [r3, #28]
 800164e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001650:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001656:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800165e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d102      	bne.n	8001670 <ETH_SetMACConfig+0x88>
 800166a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166e:	e000      	b.n	8001672 <ETH_SetMACConfig+0x8a>
 8001670:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001672:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7bdb      	ldrb	r3, [r3, #15]
 8001678:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800167a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001680:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001688:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800168a:	4313      	orrs	r3, r2
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fdee 	bl	8001284 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d101      	bne.n	80016d6 <ETH_SetMACConfig+0xee>
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	e000      	b.n	80016d8 <ETH_SetMACConfig+0xf0>
 80016d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016e6:	2a01      	cmp	r2, #1
 80016e8:	d101      	bne.n	80016ee <ETH_SetMACConfig+0x106>
 80016ea:	2208      	movs	r2, #8
 80016ec:	e000      	b.n	80016f0 <ETH_SetMACConfig+0x108>
 80016ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80016f8:	2a01      	cmp	r2, #1
 80016fa:	d101      	bne.n	8001700 <ETH_SetMACConfig+0x118>
 80016fc:	2204      	movs	r2, #4
 80016fe:	e000      	b.n	8001702 <ETH_SetMACConfig+0x11a>
 8001700:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001702:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800170a:	2a01      	cmp	r2, #1
 800170c:	d101      	bne.n	8001712 <ETH_SetMACConfig+0x12a>
 800170e:	2202      	movs	r2, #2
 8001710:	e000      	b.n	8001714 <ETH_SetMACConfig+0x12c>
 8001712:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001714:	4313      	orrs	r3, r2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fda9 	bl	8001284 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	ff20810f 	.word	0xff20810f

08001748 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <ETH_SetDMAConfig+0x110>)
 8001762:	4013      	ands	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	7b1b      	ldrb	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <ETH_SetDMAConfig+0x2c>
 800176e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001772:	e000      	b.n	8001776 <ETH_SetDMAConfig+0x2e>
 8001774:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	7b5b      	ldrb	r3, [r3, #13]
 800177a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800177c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	7f52      	ldrb	r2, [r2, #29]
 8001782:	2a00      	cmp	r2, #0
 8001784:	d102      	bne.n	800178c <ETH_SetDMAConfig+0x44>
 8001786:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800178a:	e000      	b.n	800178e <ETH_SetDMAConfig+0x46>
 800178c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800178e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	7b9b      	ldrb	r3, [r3, #14]
 8001794:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001796:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800179c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	7f1b      	ldrb	r3, [r3, #28]
 80017a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	7f9b      	ldrb	r3, [r3, #30]
 80017aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017bc:	4313      	orrs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fd50 	bl	8001284 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001802:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001808:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001810:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001812:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800181a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001820:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800182a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800182e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fd21 	bl	8001284 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	f8de3f23 	.word	0xf8de3f23

0800185c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0a6      	sub	sp, #152	@ 0x98
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001870:	2300      	movs	r3, #0
 8001872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001898:	2300      	movs	r3, #0
 800189a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe86 	bl	80015e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018dc:	2301      	movs	r3, #1
 80018de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018e0:	2301      	movs	r3, #1
 80018e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001908:	2301      	movs	r3, #1
 800190a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800190c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001910:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001916:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff08 	bl	8001748 <ETH_SetDMAConfig>
}
 8001938:	bf00      	nop
 800193a:	3798      	adds	r7, #152	@ 0x98
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3305      	adds	r3, #5
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	3204      	adds	r2, #4
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <ETH_MACAddressConfig+0x68>)
 8001962:	4413      	add	r3, r2
 8001964:	461a      	mov	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3303      	adds	r3, #3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	061a      	lsls	r2, r3, #24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3302      	adds	r3, #2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4313      	orrs	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <ETH_MACAddressConfig+0x6c>)
 8001992:	4413      	add	r3, r2
 8001994:	461a      	mov	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40028040 	.word	0x40028040
 80019ac:	40028044 	.word	0x40028044

080019b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e03e      	b.n	8001a3c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	3206      	adds	r2, #6
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d80c      	bhi.n	8001a20 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	e004      	b.n	8001a2a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d9bd      	bls.n	80019be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a54:	611a      	str	r2, [r3, #16]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e046      	b.n	8001afe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6919      	ldr	r1, [r3, #16]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001ab4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	3212      	adds	r2, #18
 8001aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d80c      	bhi.n	8001aee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6919      	ldr	r1, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	e004      	b.n	8001af8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d9b5      	bls.n	8001a70 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2e:	60da      	str	r2, [r3, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e175      	b.n	8001e48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8164 	bne.w	8001e42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x56>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80be 	beq.w	8001e42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a65      	ldr	r2, [pc, #404]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b63      	ldr	r3, [pc, #396]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cde:	4a61      	ldr	r2, [pc, #388]	@ (8001e64 <HAL_GPIO_Init+0x328>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_GPIO_Init+0x32c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d037      	beq.n	8001d7a <HAL_GPIO_Init+0x23e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	@ (8001e6c <HAL_GPIO_Init+0x330>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d031      	beq.n	8001d76 <HAL_GPIO_Init+0x23a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a56      	ldr	r2, [pc, #344]	@ (8001e70 <HAL_GPIO_Init+0x334>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x236>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a55      	ldr	r2, [pc, #340]	@ (8001e74 <HAL_GPIO_Init+0x338>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x232>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a54      	ldr	r2, [pc, #336]	@ (8001e78 <HAL_GPIO_Init+0x33c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x22e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a53      	ldr	r2, [pc, #332]	@ (8001e7c <HAL_GPIO_Init+0x340>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x22a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_GPIO_Init+0x344>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a51      	ldr	r2, [pc, #324]	@ (8001e84 <HAL_GPIO_Init+0x348>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x222>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <HAL_GPIO_Init+0x34c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x21e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e8c <HAL_GPIO_Init+0x350>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x21a>
 8001d52:	2309      	movs	r3, #9
 8001d54:	e012      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d56:	230a      	movs	r3, #10
 8001d58:	e010      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	e00e      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e00a      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d8c:	4935      	ldr	r1, [pc, #212]	@ (8001e64 <HAL_GPIO_Init+0x328>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a34      	ldr	r2, [pc, #208]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b32      	ldr	r3, [pc, #200]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e12:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_GPIO_Init+0x354>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	f67f ae86 	bls.w	8001b5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40021400 	.word	0x40021400
 8001e80:	40021800 	.word	0x40021800
 8001e84:	40021c00 	.word	0x40021c00
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40022400 	.word	0x40022400
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	400b      	ands	r3, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fe44 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	b08f      	sub	sp, #60	@ 0x3c
 8001f60:	af0a      	add	r7, sp, #40	@ 0x28
 8001f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e116      	b.n	800219c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff f819 	bl	8000fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fc01 	bl	80047b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	687e      	ldr	r6, [r7, #4]
 8001fba:	466d      	mov	r5, sp
 8001fbc:	f106 0410 	add.w	r4, r6, #16
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd0:	1d33      	adds	r3, r6, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f002 fb95 	bl	8004704 <USB_CoreInit>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d7      	b.n	800219c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fbef 	bl	80047d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e04a      	b.n	8002094 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	333d      	adds	r3, #61	@ 0x3d
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	333c      	adds	r3, #60	@ 0x3c
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b298      	uxth	r0, r3
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3344      	adds	r3, #68	@ 0x44
 800203a:	4602      	mov	r2, r0
 800203c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3340      	adds	r3, #64	@ 0x40
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3348      	adds	r3, #72	@ 0x48
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334c      	adds	r3, #76	@ 0x4c
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3354      	adds	r3, #84	@ 0x54
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	3301      	adds	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d3af      	bcc.n	8001ffe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e044      	b.n	800212e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	3301      	adds	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3b5      	bcc.n	80020a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	687e      	ldr	r6, [r7, #4]
 8002140:	466d      	mov	r5, sp
 8002142:	f106 0410 	add.w	r4, r6, #16
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002152:	e885 0003 	stmia.w	r5, {r0, r1}
 8002156:	1d33      	adds	r3, r6, #4
 8002158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f002 fb88 	bl	8004870 <USB_DevInit>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e014      	b.n	800219c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f80a 	bl	80021a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fd46 	bl	8004c26 <USB_DevDisconnect>

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	10000003 	.word	0x10000003

080021ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002238:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223a:	f7ff f817 	bl	800126c <HAL_GetTick>
 800223e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002240:	e009      	b.n	8002256 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002242:	f7ff f813 	bl	800126c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002250:	d901      	bls.n	8002256 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e022      	b.n	800229c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002262:	d1ee      	bne.n	8002242 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800226a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7fe fffc 	bl	800126c <HAL_GetTick>
 8002274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002276:	e009      	b.n	800228c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002278:	f7fe fff8 	bl	800126c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002286:	d901      	bls.n	800228c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e007      	b.n	800229c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002298:	d1ee      	bne.n	8002278 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e29b      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8087 	beq.w	80023de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d0:	4b96      	ldr	r3, [pc, #600]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d00c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022dc:	4b93      	ldr	r3, [pc, #588]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d112      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
 80022e8:	4b90      	ldr	r3, [pc, #576]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f4:	d10b      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	4b8d      	ldr	r3, [pc, #564]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d06c      	beq.n	80023dc <HAL_RCC_OscConfig+0x130>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d168      	bne.n	80023dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e275      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x7a>
 8002318:	4b84      	ldr	r3, [pc, #528]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a83      	ldr	r2, [pc, #524]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x9c>
 800232e:	4b7f      	ldr	r3, [pc, #508]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7c      	ldr	r3, [pc, #496]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xc0>
 8002352:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b73      	ldr	r3, [pc, #460]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a72      	ldr	r2, [pc, #456]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 800236c:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6e      	ldr	r2, [pc, #440]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b6c      	ldr	r3, [pc, #432]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6b      	ldr	r2, [pc, #428]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe ff6e 	bl	800126c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe ff6a 	bl	800126c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e229      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff5a 	bl	800126c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe ff56 	bl	800126c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e215      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b57      	ldr	r3, [pc, #348]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x110>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d069      	beq.n	80024be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ea:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b4d      	ldr	r3, [pc, #308]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x190>
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1e9      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	493d      	ldr	r1, [pc, #244]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e040      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b39      	ldr	r3, [pc, #228]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a38      	ldr	r2, [pc, #224]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe ff0c 	bl	800126c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe ff08 	bl	800126c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1c7      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4929      	ldr	r1, [pc, #164]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
 800248a:	e018      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fee8 	bl	800126c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fee4 	bl	800126c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1a3      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d038      	beq.n	800253c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d6:	4a15      	ldr	r2, [pc, #84]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fec5 	bl	800126c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fec1 	bl	800126c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e180      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x23a>
 8002504:	e01a      	b.n	800253c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250a:	4a08      	ldr	r2, [pc, #32]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe feab 	bl	800126c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fea7 	bl	800126c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d903      	bls.n	8002530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e166      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
 800252c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b92      	ldr	r3, [pc, #584]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a4 	beq.w	8002692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b8c      	ldr	r3, [pc, #560]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b89      	ldr	r3, [pc, #548]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a88      	ldr	r2, [pc, #544]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b86      	ldr	r3, [pc, #536]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b83      	ldr	r3, [pc, #524]	@ (8002780 <HAL_RCC_OscConfig+0x4d4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800257e:	4b80      	ldr	r3, [pc, #512]	@ (8002780 <HAL_RCC_OscConfig+0x4d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7f      	ldr	r2, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x4d4>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fe6f 	bl	800126c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe fe6b 	bl	800126c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	@ 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e12a      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	4b76      	ldr	r3, [pc, #472]	@ (8002780 <HAL_RCC_OscConfig+0x4d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x31a>
 80025b8:	4b70      	ldr	r3, [pc, #448]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	4a6f      	ldr	r2, [pc, #444]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c4:	e02d      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x33c>
 80025ce:	4b6b      	ldr	r3, [pc, #428]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	4a6a      	ldr	r2, [pc, #424]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025da:	4b68      	ldr	r3, [pc, #416]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	4a67      	ldr	r2, [pc, #412]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x35e>
 80025f0:	4b62      	ldr	r3, [pc, #392]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	4a61      	ldr	r2, [pc, #388]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fc:	4b5f      	ldr	r3, [pc, #380]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a5e      	ldr	r2, [pc, #376]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 800260a:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260e:	4a5b      	ldr	r2, [pc, #364]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	@ 0x70
 8002616:	4b59      	ldr	r3, [pc, #356]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261a:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fe1f 	bl	800126c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fe1b 	bl	800126c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0d8      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b4c      	ldr	r3, [pc, #304]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x386>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fe09 	bl	800126c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fe05 	bl	800126c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0c2      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a3c      	ldr	r2, [pc, #240]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80ae 	beq.w	80027f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b37      	ldr	r3, [pc, #220]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d06d      	beq.n	8002784 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d14b      	bne.n	8002748 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b32      	ldr	r3, [pc, #200]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a31      	ldr	r2, [pc, #196]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fdd6 	bl	800126c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fdd2 	bl	800126c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e091      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b29      	ldr	r3, [pc, #164]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	071b      	lsls	r3, r3, #28
 800270e:	491b      	ldr	r1, [pc, #108]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fda4 	bl	800126c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fda0 	bl	800126c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e05f      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x47c>
 8002746:	e057      	b.n	80027f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fd8a 	bl	800126c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fd86 	bl	800126c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e045      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x4b0>
 800277a:	e03d      	b.n	80027f8 <HAL_RCC_OscConfig+0x54c>
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002784:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <HAL_RCC_OscConfig+0x558>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d030      	beq.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d129      	bne.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d122      	bne.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	d119      	bne.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10f      	bne.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0d0      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b67      	ldr	r3, [pc, #412]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 020f 	bic.w	r2, r3, #15
 8002836:	4965      	ldr	r1, [pc, #404]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800288a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d040      	beq.n	800292c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d115      	bne.n	80028ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e073      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4936      	ldr	r1, [pc, #216]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fcb6 	bl	800126c <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe fcb2 	bl	800126c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e053      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d210      	bcs.n	800295c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	4922      	ldr	r1, [pc, #136]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1d4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fc12 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08004d5c 	.word	0x08004d5c
 80029d8:	20000018 	.word	0x20000018
 80029dc:	2000001c 	.word	0x2000001c

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b094      	sub	sp, #80	@ 0x50
 80029e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ec:	2300      	movs	r3, #0
 80029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f8:	4b79      	ldr	r3, [pc, #484]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f200 80e1 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a12:	e0db      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b73      	ldr	r3, [pc, #460]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a18:	e0db      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b73      	ldr	r3, [pc, #460]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	1a51      	subs	r1, r2, r1
 8002a6e:	6139      	str	r1, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	eb63 0301 	sbc.w	r3, r3, r1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a84:	4659      	mov	r1, fp
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a8e:	4651      	mov	r1, sl
 8002a90:	018a      	lsls	r2, r1, #6
 8002a92:	4651      	mov	r1, sl
 8002a94:	ebb2 0801 	subs.w	r8, r2, r1
 8002a98:	4659      	mov	r1, fp
 8002a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	eb18 0303 	adds.w	r3, r8, r3
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	462b      	mov	r3, r5
 8002ac0:	eb49 0303 	adc.w	r3, r9, r3
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	024b      	lsls	r3, r1, #9
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002adc:	4621      	mov	r1, r4
 8002ade:	024a      	lsls	r2, r1, #9
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af0:	f7fd fba2 	bl	8000238 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002afc:	e058      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	4611      	mov	r1, r2
 8002b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4641      	mov	r1, r8
 8002b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b50:	ebb2 040a 	subs.w	r4, r2, sl
 8002b54:	eb63 050b 	sbc.w	r5, r3, fp
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	61fa      	str	r2, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	f7fd fb48 	bl	8000238 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4613      	mov	r3, r2
 8002bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3750      	adds	r7, #80	@ 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000018 	.word	0x20000018

08002c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c08:	f7ff fff0 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4903      	ldr	r1, [pc, #12]	@ (8002c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08004d6c 	.word	0x08004d6c

08002c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c30:	f7ff ffdc 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	@ (8002c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08004d6c 	.word	0x08004d6c

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c7c:	4b69      	ldr	r3, [pc, #420]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a68      	ldr	r2, [pc, #416]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c86:	6093      	str	r3, [r2, #8]
 8002c88:	4b66      	ldr	r3, [pc, #408]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c90:	4964      	ldr	r1, [pc, #400]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cae:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	4959      	ldr	r1, [pc, #356]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cea:	4b4e      	ldr	r3, [pc, #312]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	494a      	ldr	r1, [pc, #296]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 808b 	beq.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b3a      	ldr	r3, [pc, #232]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	4a39      	ldr	r2, [pc, #228]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d44:	4b37      	ldr	r3, [pc, #220]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a34      	ldr	r2, [pc, #208]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fa86 	bl	800126c <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7fe fa82 	bl	800126c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e38f      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d76:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d82:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d035      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d02e      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da0:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	4a1a      	ldr	r2, [pc, #104]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d114      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fa4a 	bl	800126c <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fa46 	bl	800126c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e351      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e0a:	d111      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	4901      	ldr	r1, [pc, #4]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	0ffffcff 	.word	0x0ffffcff
 8002e30:	4bac      	ldr	r3, [pc, #688]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4aab      	ldr	r2, [pc, #684]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e3a:	6093      	str	r3, [r2, #8]
 8002e3c:	4ba9      	ldr	r3, [pc, #676]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	49a6      	ldr	r1, [pc, #664]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e5a:	4ba2      	ldr	r3, [pc, #648]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e60:	4aa0      	ldr	r2, [pc, #640]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e6a:	4b9e      	ldr	r3, [pc, #632]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	499b      	ldr	r1, [pc, #620]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e88:	4b96      	ldr	r3, [pc, #600]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e96:	4993      	ldr	r1, [pc, #588]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb8:	498a      	ldr	r1, [pc, #552]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ecc:	4b85      	ldr	r3, [pc, #532]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eda:	4982      	ldr	r1, [pc, #520]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eee:	4b7d      	ldr	r3, [pc, #500]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4979      	ldr	r1, [pc, #484]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f10:	4b74      	ldr	r3, [pc, #464]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	4971      	ldr	r1, [pc, #452]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f32:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f023 020c 	bic.w	r2, r3, #12
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	4968      	ldr	r1, [pc, #416]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f54:	4b63      	ldr	r3, [pc, #396]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	4960      	ldr	r1, [pc, #384]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f76:	4b5b      	ldr	r3, [pc, #364]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f84:	4957      	ldr	r1, [pc, #348]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f98:	4b52      	ldr	r3, [pc, #328]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa6:	494f      	ldr	r1, [pc, #316]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fba:	4b4a      	ldr	r3, [pc, #296]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc8:	4946      	ldr	r1, [pc, #280]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fdc:	4b41      	ldr	r3, [pc, #260]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	493e      	ldr	r1, [pc, #248]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ffe:	4b39      	ldr	r3, [pc, #228]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003020:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800302e:	492d      	ldr	r1, [pc, #180]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003042:	4b28      	ldr	r3, [pc, #160]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003050:	4924      	ldr	r1, [pc, #144]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800305c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003060:	d101      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003088:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003090:	4914      	ldr	r1, [pc, #80]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b4:	490b      	ldr	r1, [pc, #44]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00f      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030c8:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d8:	4902      	ldr	r1, [pc, #8]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	4986      	ldr	r1, [pc, #536]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003118:	4b81      	ldr	r3, [pc, #516]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800311e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003128:	497d      	ldr	r1, [pc, #500]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d006      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80d6 	beq.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003144:	4b76      	ldr	r3, [pc, #472]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a75      	ldr	r2, [pc, #468]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe f88c 	bl	800126c <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003158:	f7fe f888 	bl	800126c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e195      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800316a:	4b6d      	ldr	r3, [pc, #436]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d021      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11d      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800318a:	4b65      	ldr	r3, [pc, #404]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003198:	4b61      	ldr	r3, [pc, #388]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319e:	0e1b      	lsrs	r3, r3, #24
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	019a      	lsls	r2, r3, #6
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	4958      	ldr	r1, [pc, #352]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f0:	d129      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003200:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003206:	0f1b      	lsrs	r3, r3, #28
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	493e      	ldr	r1, [pc, #248]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800322e:	4b3c      	ldr	r3, [pc, #240]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003234:	f023 021f 	bic.w	r2, r3, #31
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	3b01      	subs	r3, #1
 800323e:	4938      	ldr	r1, [pc, #224]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01d      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003252:	4b33      	ldr	r3, [pc, #204]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003260:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4926      	ldr	r1, [pc, #152]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	491a      	ldr	r1, [pc, #104]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032be:	4b18      	ldr	r3, [pc, #96]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ca:	f7fd ffcf 	bl	800126c <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032d2:	f7fd ffcb 	bl	800126c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	@ 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0d8      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 80ce 	bne.w	8003494 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a08      	ldr	r2, [pc, #32]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fd ffb2 	bl	800126c <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800330a:	e00b      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800330c:	f7fd ffae 	bl	800126c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d904      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0bb      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003324:	4b5e      	ldr	r3, [pc, #376]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800332c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003330:	d0ec      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02e      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d12a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800335a:	4b51      	ldr	r3, [pc, #324]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003368:	4b4d      	ldr	r3, [pc, #308]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	0f1b      	lsrs	r3, r3, #28
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	4944      	ldr	r1, [pc, #272]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003396:	4b42      	ldr	r3, [pc, #264]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800339c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	493d      	ldr	r1, [pc, #244]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d022      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c4:	d11d      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033c6:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	0f1b      	lsrs	r3, r3, #28
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	019a      	lsls	r2, r3, #6
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	061b      	lsls	r3, r3, #24
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	071b      	lsls	r3, r3, #28
 80033fa:	4929      	ldr	r1, [pc, #164]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d028      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800340e:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003414:	0e1b      	lsrs	r3, r3, #24
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800341c:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	431a      	orrs	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	4917      	ldr	r1, [pc, #92]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800344a:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	4911      	ldr	r1, [pc, #68]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003460:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0e      	ldr	r2, [pc, #56]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fd fefe 	bl	800126c <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003474:	f7fd fefa 	bl	800126c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	@ 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e007      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800348e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003492:	d1ef      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e049      	b.n	800354a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fcf4 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fac0 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e054      	b.n	8003616 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a26      	ldr	r2, [pc, #152]	@ (8003624 <HAL_TIM_Base_Start_IT+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003596:	d01d      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <HAL_TIM_Base_Start_IT+0xd4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a21      	ldr	r2, [pc, #132]	@ (800362c <HAL_TIM_Base_Start_IT+0xd8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <HAL_TIM_Base_Start_IT+0xe0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_TIM_Base_Start_IT+0xe4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	@ (800363c <HAL_TIM_Base_Start_IT+0xe8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d115      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_TIM_Base_Start_IT+0xec>)
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d015      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d011      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e008      	b.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e000      	b.n	8003614 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40001800 	.word	0x40001800
 8003640:	00010007 	.word	0x00010007

08003644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9d0 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f9c2 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9d3 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0204 	mvn.w	r2, #4
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9a6 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f998 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f9a9 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0208 	mvn.w	r2, #8
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f97c 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f96e 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f97f 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b10      	cmp	r3, #16
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0210 	mvn.w	r2, #16
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2208      	movs	r2, #8
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f952 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f944 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f955 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f9a6 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	2b80      	cmp	r3, #128	@ 0x80
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e0:	2b80      	cmp	r3, #128	@ 0x80
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb0c 	bl	8003e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d107      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 faff 	bl	8003e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d10e      	bne.n	800384e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383a:	2b40      	cmp	r3, #64	@ 0x40
 800383c:	d107      	bne.n	800384e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f903 	bl	8003a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d10e      	bne.n	800387a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d107      	bne.n	800387a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f06f 0220 	mvn.w	r2, #32
 8003872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fabf 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x1c>
 800389c:	2302      	movs	r3, #2
 800389e:	e0b4      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x186>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	4b56      	ldr	r3, [pc, #344]	@ (8003a14 <HAL_TIM_ConfigClockSource+0x190>)
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d8:	d03e      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0xd4>
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038de:	f200 8087 	bhi.w	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e6:	f000 8086 	beq.w	80039f6 <HAL_TIM_ConfigClockSource+0x172>
 80038ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ee:	d87f      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b70      	cmp	r3, #112	@ 0x70
 80038f2:	d01a      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xa6>
 80038f4:	2b70      	cmp	r3, #112	@ 0x70
 80038f6:	d87b      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b60      	cmp	r3, #96	@ 0x60
 80038fa:	d050      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x11a>
 80038fc:	2b60      	cmp	r3, #96	@ 0x60
 80038fe:	d877      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b50      	cmp	r3, #80	@ 0x50
 8003902:	d03c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0xfa>
 8003904:	2b50      	cmp	r3, #80	@ 0x50
 8003906:	d873      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d058      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x13a>
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d86f      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b30      	cmp	r3, #48	@ 0x30
 8003912:	d064      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b30      	cmp	r3, #48	@ 0x30
 8003916:	d86b      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b20      	cmp	r3, #32
 800391a:	d060      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x15a>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d867      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d05c      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b10      	cmp	r3, #16
 8003926:	d05a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	e062      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	f000 f9af 	bl	8003c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800394c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	609a      	str	r2, [r3, #8]
      break;
 8003956:	e04f      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	f000 f998 	bl	8003c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800397a:	609a      	str	r2, [r3, #8]
      break;
 800397c:	e03c      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	461a      	mov	r2, r3
 800398c:	f000 f90c 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2150      	movs	r1, #80	@ 0x50
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f965 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 800399c:	e02c      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	461a      	mov	r2, r3
 80039ac:	f000 f92b 	bl	8003c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2160      	movs	r1, #96	@ 0x60
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f955 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039bc:	e01c      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	461a      	mov	r2, r3
 80039cc:	f000 f8ec 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2140      	movs	r1, #64	@ 0x40
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f945 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039dc:	e00c      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f000 f93c 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039ee:	e003      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e000      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	fffeff88 	.word	0xfffeff88

08003a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	@ (8003b7c <TIM_Base_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b80 <TIM_Base_SetConfig+0x118>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	@ (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b88 <TIM_Base_SetConfig+0x120>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8003b8c <TIM_Base_SetConfig+0x124>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b7c <TIM_Base_SetConfig+0x114>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac8:	d027      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b80 <TIM_Base_SetConfig+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d023      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b88 <TIM_Base_SetConfig+0x120>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <TIM_Base_SetConfig+0x124>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d017      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <TIM_Base_SetConfig+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a26      	ldr	r2, [pc, #152]	@ (8003b98 <TIM_Base_SetConfig+0x130>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <TIM_Base_SetConfig+0x134>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a23      	ldr	r2, [pc, #140]	@ (8003ba4 <TIM_Base_SetConfig+0x13c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <TIM_Base_SetConfig+0x114>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <TIM_Base_SetConfig+0x124>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800
 8003b9c:	40001800 	.word	0x40001800
 8003ba0:	40001c00 	.word	0x40001c00
 8003ba4:	40002000 	.word	0x40002000

08003ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 030a 	bic.w	r3, r3, #10
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f043 0307 	orr.w	r3, r3, #7
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e06d      	b.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	@ (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	@ (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d66:	d01d      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1a      	ldr	r2, [pc, #104]	@ (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	@ (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10c      	bne.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40010400 	.word	0x40010400
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40001800 	.word	0x40001800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e040      	b.n	8003ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f852 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f82c 	bl	8003ed0 <UART_SetConfig>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e022      	b.n	8003ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa84 	bl	8004398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb0b 	bl	80044dc <UART_CheckIdleState>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4ba6      	ldr	r3, [pc, #664]	@ (8004194 <UART_SetConfig+0x2c4>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a94      	ldr	r2, [pc, #592]	@ (8004198 <UART_SetConfig+0x2c8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d120      	bne.n	8003f8e <UART_SetConfig+0xbe>
 8003f4c:	4b93      	ldr	r3, [pc, #588]	@ (800419c <UART_SetConfig+0x2cc>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d816      	bhi.n	8003f88 <UART_SetConfig+0xb8>
 8003f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f60 <UART_SetConfig+0x90>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f7d 	.word	0x08003f7d
 8003f68:	08003f77 	.word	0x08003f77
 8003f6c:	08003f83 	.word	0x08003f83
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e150      	b.n	8004218 <UART_SetConfig+0x348>
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e14d      	b.n	8004218 <UART_SetConfig+0x348>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e14a      	b.n	8004218 <UART_SetConfig+0x348>
 8003f82:	2308      	movs	r3, #8
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e147      	b.n	8004218 <UART_SetConfig+0x348>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e144      	b.n	8004218 <UART_SetConfig+0x348>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a83      	ldr	r2, [pc, #524]	@ (80041a0 <UART_SetConfig+0x2d0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d132      	bne.n	8003ffe <UART_SetConfig+0x12e>
 8003f98:	4b80      	ldr	r3, [pc, #512]	@ (800419c <UART_SetConfig+0x2cc>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d828      	bhi.n	8003ff8 <UART_SetConfig+0x128>
 8003fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <UART_SetConfig+0xdc>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08003fed 	.word	0x08003fed
 8003fc0:	08003ff9 	.word	0x08003ff9
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08003ff9 	.word	0x08003ff9
 8003fcc:	08003fe7 	.word	0x08003fe7
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08003ff9 	.word	0x08003ff9
 8003fdc:	08003ff3 	.word	0x08003ff3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e118      	b.n	8004218 <UART_SetConfig+0x348>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e115      	b.n	8004218 <UART_SetConfig+0x348>
 8003fec:	2304      	movs	r3, #4
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e112      	b.n	8004218 <UART_SetConfig+0x348>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e10f      	b.n	8004218 <UART_SetConfig+0x348>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e10c      	b.n	8004218 <UART_SetConfig+0x348>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a68      	ldr	r2, [pc, #416]	@ (80041a4 <UART_SetConfig+0x2d4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d120      	bne.n	800404a <UART_SetConfig+0x17a>
 8004008:	4b64      	ldr	r3, [pc, #400]	@ (800419c <UART_SetConfig+0x2cc>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004012:	2b30      	cmp	r3, #48	@ 0x30
 8004014:	d013      	beq.n	800403e <UART_SetConfig+0x16e>
 8004016:	2b30      	cmp	r3, #48	@ 0x30
 8004018:	d814      	bhi.n	8004044 <UART_SetConfig+0x174>
 800401a:	2b20      	cmp	r3, #32
 800401c:	d009      	beq.n	8004032 <UART_SetConfig+0x162>
 800401e:	2b20      	cmp	r3, #32
 8004020:	d810      	bhi.n	8004044 <UART_SetConfig+0x174>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <UART_SetConfig+0x15c>
 8004026:	2b10      	cmp	r3, #16
 8004028:	d006      	beq.n	8004038 <UART_SetConfig+0x168>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x174>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e0f2      	b.n	8004218 <UART_SetConfig+0x348>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e0ef      	b.n	8004218 <UART_SetConfig+0x348>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e0ec      	b.n	8004218 <UART_SetConfig+0x348>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e0e9      	b.n	8004218 <UART_SetConfig+0x348>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e0e6      	b.n	8004218 <UART_SetConfig+0x348>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a56      	ldr	r2, [pc, #344]	@ (80041a8 <UART_SetConfig+0x2d8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <UART_SetConfig+0x1c6>
 8004054:	4b51      	ldr	r3, [pc, #324]	@ (800419c <UART_SetConfig+0x2cc>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800405e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004060:	d013      	beq.n	800408a <UART_SetConfig+0x1ba>
 8004062:	2bc0      	cmp	r3, #192	@ 0xc0
 8004064:	d814      	bhi.n	8004090 <UART_SetConfig+0x1c0>
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d009      	beq.n	800407e <UART_SetConfig+0x1ae>
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d810      	bhi.n	8004090 <UART_SetConfig+0x1c0>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x1a8>
 8004072:	2b40      	cmp	r3, #64	@ 0x40
 8004074:	d006      	beq.n	8004084 <UART_SetConfig+0x1b4>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x1c0>
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e0cc      	b.n	8004218 <UART_SetConfig+0x348>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0c9      	b.n	8004218 <UART_SetConfig+0x348>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0c6      	b.n	8004218 <UART_SetConfig+0x348>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0c3      	b.n	8004218 <UART_SetConfig+0x348>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0c0      	b.n	8004218 <UART_SetConfig+0x348>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a44      	ldr	r2, [pc, #272]	@ (80041ac <UART_SetConfig+0x2dc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d125      	bne.n	80040ec <UART_SetConfig+0x21c>
 80040a0:	4b3e      	ldr	r3, [pc, #248]	@ (800419c <UART_SetConfig+0x2cc>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ae:	d017      	beq.n	80040e0 <UART_SetConfig+0x210>
 80040b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b4:	d817      	bhi.n	80040e6 <UART_SetConfig+0x216>
 80040b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ba:	d00b      	beq.n	80040d4 <UART_SetConfig+0x204>
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c0:	d811      	bhi.n	80040e6 <UART_SetConfig+0x216>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <UART_SetConfig+0x1fe>
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ca:	d006      	beq.n	80040da <UART_SetConfig+0x20a>
 80040cc:	e00b      	b.n	80040e6 <UART_SetConfig+0x216>
 80040ce:	2300      	movs	r3, #0
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e0a1      	b.n	8004218 <UART_SetConfig+0x348>
 80040d4:	2302      	movs	r3, #2
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e09e      	b.n	8004218 <UART_SetConfig+0x348>
 80040da:	2304      	movs	r3, #4
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e09b      	b.n	8004218 <UART_SetConfig+0x348>
 80040e0:	2308      	movs	r3, #8
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e098      	b.n	8004218 <UART_SetConfig+0x348>
 80040e6:	2310      	movs	r3, #16
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e095      	b.n	8004218 <UART_SetConfig+0x348>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2f      	ldr	r2, [pc, #188]	@ (80041b0 <UART_SetConfig+0x2e0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d125      	bne.n	8004142 <UART_SetConfig+0x272>
 80040f6:	4b29      	ldr	r3, [pc, #164]	@ (800419c <UART_SetConfig+0x2cc>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004100:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004104:	d017      	beq.n	8004136 <UART_SetConfig+0x266>
 8004106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x26c>
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004110:	d00b      	beq.n	800412a <UART_SetConfig+0x25a>
 8004112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x26c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0x254>
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x260>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x26c>
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e076      	b.n	8004218 <UART_SetConfig+0x348>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e073      	b.n	8004218 <UART_SetConfig+0x348>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e070      	b.n	8004218 <UART_SetConfig+0x348>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e06d      	b.n	8004218 <UART_SetConfig+0x348>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e06a      	b.n	8004218 <UART_SetConfig+0x348>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <UART_SetConfig+0x2e4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d138      	bne.n	80041be <UART_SetConfig+0x2ee>
 800414c:	4b13      	ldr	r3, [pc, #76]	@ (800419c <UART_SetConfig+0x2cc>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800415a:	d017      	beq.n	800418c <UART_SetConfig+0x2bc>
 800415c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004160:	d82a      	bhi.n	80041b8 <UART_SetConfig+0x2e8>
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004166:	d00b      	beq.n	8004180 <UART_SetConfig+0x2b0>
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416c:	d824      	bhi.n	80041b8 <UART_SetConfig+0x2e8>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <UART_SetConfig+0x2aa>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004176:	d006      	beq.n	8004186 <UART_SetConfig+0x2b6>
 8004178:	e01e      	b.n	80041b8 <UART_SetConfig+0x2e8>
 800417a:	2300      	movs	r3, #0
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e04b      	b.n	8004218 <UART_SetConfig+0x348>
 8004180:	2302      	movs	r3, #2
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e048      	b.n	8004218 <UART_SetConfig+0x348>
 8004186:	2304      	movs	r3, #4
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e045      	b.n	8004218 <UART_SetConfig+0x348>
 800418c:	2308      	movs	r3, #8
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e042      	b.n	8004218 <UART_SetConfig+0x348>
 8004192:	bf00      	nop
 8004194:	efff69f3 	.word	0xefff69f3
 8004198:	40011000 	.word	0x40011000
 800419c:	40023800 	.word	0x40023800
 80041a0:	40004400 	.word	0x40004400
 80041a4:	40004800 	.word	0x40004800
 80041a8:	40004c00 	.word	0x40004c00
 80041ac:	40005000 	.word	0x40005000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40007800 	.word	0x40007800
 80041b8:	2310      	movs	r3, #16
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e02c      	b.n	8004218 <UART_SetConfig+0x348>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a72      	ldr	r2, [pc, #456]	@ (800438c <UART_SetConfig+0x4bc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d125      	bne.n	8004214 <UART_SetConfig+0x344>
 80041c8:	4b71      	ldr	r3, [pc, #452]	@ (8004390 <UART_SetConfig+0x4c0>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041d6:	d017      	beq.n	8004208 <UART_SetConfig+0x338>
 80041d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041dc:	d817      	bhi.n	800420e <UART_SetConfig+0x33e>
 80041de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e2:	d00b      	beq.n	80041fc <UART_SetConfig+0x32c>
 80041e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e8:	d811      	bhi.n	800420e <UART_SetConfig+0x33e>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <UART_SetConfig+0x326>
 80041ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041f2:	d006      	beq.n	8004202 <UART_SetConfig+0x332>
 80041f4:	e00b      	b.n	800420e <UART_SetConfig+0x33e>
 80041f6:	2300      	movs	r3, #0
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e00d      	b.n	8004218 <UART_SetConfig+0x348>
 80041fc:	2302      	movs	r3, #2
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e00a      	b.n	8004218 <UART_SetConfig+0x348>
 8004202:	2304      	movs	r3, #4
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e007      	b.n	8004218 <UART_SetConfig+0x348>
 8004208:	2308      	movs	r3, #8
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e004      	b.n	8004218 <UART_SetConfig+0x348>
 800420e:	2310      	movs	r3, #16
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e001      	b.n	8004218 <UART_SetConfig+0x348>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004220:	d15b      	bne.n	80042da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d828      	bhi.n	800427a <UART_SetConfig+0x3aa>
 8004228:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <UART_SetConfig+0x360>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004255 	.word	0x08004255
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800427b 	.word	0x0800427b
 8004240:	0800426b 	.word	0x0800426b
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800427b 	.word	0x0800427b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe fcd6 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 8004258:	61b8      	str	r0, [r7, #24]
        break;
 800425a:	e013      	b.n	8004284 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7fe fce6 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8004260:	61b8      	str	r0, [r7, #24]
        break;
 8004262:	e00f      	b.n	8004284 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b4b      	ldr	r3, [pc, #300]	@ (8004394 <UART_SetConfig+0x4c4>)
 8004266:	61bb      	str	r3, [r7, #24]
        break;
 8004268:	e00c      	b.n	8004284 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe fbb9 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800426e:	61b8      	str	r0, [r7, #24]
        break;
 8004270:	e008      	b.n	8004284 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004276:	61bb      	str	r3, [r7, #24]
        break;
 8004278:	e004      	b.n	8004284 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	77bb      	strb	r3, [r7, #30]
        break;
 8004282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d074      	beq.n	8004374 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d916      	bls.n	80042d4 <UART_SetConfig+0x404>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d212      	bcs.n	80042d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f023 030f 	bic.w	r3, r3, #15
 80042b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	89fa      	ldrh	r2, [r7, #14]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	e04f      	b.n	8004374 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77bb      	strb	r3, [r7, #30]
 80042d8:	e04c      	b.n	8004374 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042da:	7ffb      	ldrb	r3, [r7, #31]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d828      	bhi.n	8004332 <UART_SetConfig+0x462>
 80042e0:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <UART_SetConfig+0x418>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	08004333 	.word	0x08004333
 80042f8:	08004323 	.word	0x08004323
 80042fc:	08004333 	.word	0x08004333
 8004300:	08004333 	.word	0x08004333
 8004304:	08004333 	.word	0x08004333
 8004308:	0800432b 	.word	0x0800432b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430c:	f7fe fc7a 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e013      	b.n	800433c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7fe fc8a 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8004318:	61b8      	str	r0, [r7, #24]
        break;
 800431a:	e00f      	b.n	800433c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <UART_SetConfig+0x4c4>)
 800431e:	61bb      	str	r3, [r7, #24]
        break;
 8004320:	e00c      	b.n	800433c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004322:	f7fe fb5d 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8004326:	61b8      	str	r0, [r7, #24]
        break;
 8004328:	e008      	b.n	800433c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e004      	b.n	800433c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	77bb      	strb	r3, [r7, #30]
        break;
 800433a:	bf00      	nop
    }

    if (pclk != 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	085a      	lsrs	r2, r3, #1
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	441a      	add	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d909      	bls.n	8004370 <UART_SetConfig+0x4a0>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004362:	d205      	bcs.n	8004370 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e001      	b.n	8004374 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004380:	7fbb      	ldrb	r3, [r7, #30]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40007c00 	.word	0x40007c00
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400

08004398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01a      	beq.n	80044ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004496:	d10a      	bne.n	80044ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044ec:	f7fc febe 	bl	800126c <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d10e      	bne.n	800451e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f831 	bl	8004576 <UART_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e027      	b.n	800456e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d10e      	bne.n	800454a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800452c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f81b 	bl	8004576 <UART_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e011      	b.n	800456e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b09c      	sub	sp, #112	@ 0x70
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004586:	e0a7      	b.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	f000 80a3 	beq.w	80046d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fc fe6b 	bl	800126c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13f      	bne.n	8004628 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80045bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80045cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80045d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e6      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3308      	adds	r3, #8
 80045e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3308      	adds	r3, #8
 80045f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80045fc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e068      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d050      	beq.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004644:	d148      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800464e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004664:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004670:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	613b      	str	r3, [r7, #16]
   return(result);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80046a2:	623a      	str	r2, [r7, #32]
 80046a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	69f9      	ldr	r1, [r7, #28]
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e010      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f43f af48 	beq.w	8004588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3770      	adds	r7, #112	@ 0x70
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 001c 	add.w	r0, r7, #28
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d120      	bne.n	800475e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <USB_CoreInit+0xac>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa96 	bl	8004c84 <USB_CoreReset>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e010      	b.n	8004780 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa8a 	bl	8004c84 <USB_CoreReset>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10b      	bne.n	800479e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f043 0206 	orr.w	r2, r3, #6
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047aa:	b004      	add	sp, #16
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	ffbdffbf 	.word	0xffbdffbf

080047b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 0201 	bic.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d115      	bne.n	8004824 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004804:	2001      	movs	r0, #1
 8004806:	f7fc fd3d 	bl	8001284 <HAL_Delay>
      ms++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa29 	bl	8004c68 <USB_GetMode>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d01e      	beq.n	800485a <USB_SetCurrentMode+0x84>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b31      	cmp	r3, #49	@ 0x31
 8004820:	d9f0      	bls.n	8004804 <USB_SetCurrentMode+0x2e>
 8004822:	e01a      	b.n	800485a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d115      	bne.n	8004856 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004836:	2001      	movs	r0, #1
 8004838:	f7fc fd24 	bl	8001284 <HAL_Delay>
      ms++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa10 	bl	8004c68 <USB_GetMode>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <USB_SetCurrentMode+0x84>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b31      	cmp	r3, #49	@ 0x31
 8004852:	d9f0      	bls.n	8004836 <USB_SetCurrentMode+0x60>
 8004854:	e001      	b.n	800485a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e005      	b.n	8004866 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b32      	cmp	r3, #50	@ 0x32
 800485e:	d101      	bne.n	8004864 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004870:	b084      	sub	sp, #16
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800487e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e009      	b.n	80048a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3340      	adds	r3, #64	@ 0x40
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3301      	adds	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b0e      	cmp	r3, #14
 80048a8:	d9f2      	bls.n	8004890 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11c      	bne.n	80048ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048be:	f043 0302 	orr.w	r3, r3, #2
 80048c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e005      	b.n	80048f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048fc:	461a      	mov	r2, r3
 80048fe:	2300      	movs	r3, #0
 8004900:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004908:	4619      	mov	r1, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	461a      	mov	r2, r3
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004918:	2b01      	cmp	r3, #1
 800491a:	d10c      	bne.n	8004936 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004922:	2100      	movs	r1, #0
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f965 	bl	8004bf4 <USB_SetDevSpeed>
 800492a:	e008      	b.n	800493e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800492c:	2101      	movs	r1, #1
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f960 	bl	8004bf4 <USB_SetDevSpeed>
 8004934:	e003      	b.n	800493e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004936:	2103      	movs	r1, #3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f95b 	bl	8004bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800493e:	2110      	movs	r1, #16
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8f3 	bl	8004b2c <USB_FlushTxFifo>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f91f 	bl	8004b94 <USB_FlushRxFifo>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004966:	461a      	mov	r2, r3
 8004968:	2300      	movs	r3, #0
 800496a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497e:	461a      	mov	r2, r3
 8004980:	2300      	movs	r3, #0
 8004982:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e043      	b.n	8004a12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800499c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049a0:	d118      	bne.n	80049d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b4:	461a      	mov	r2, r3
 80049b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e013      	b.n	80049e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e008      	b.n	80049e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3b7      	bcc.n	800498a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e043      	b.n	8004aa8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a36:	d118      	bne.n	8004a6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e013      	b.n	8004a7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a60:	461a      	mov	r2, r3
 8004a62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e008      	b.n	8004a7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d3b7      	bcc.n	8004a20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f043 0210 	orr.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <USB_DevInit+0x2b4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f043 0208 	orr.w	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <USB_DevInit+0x2b8>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b20:	b004      	add	sp, #16
 8004b22:	4770      	bx	lr
 8004b24:	803c3800 	.word	0x803c3800
 8004b28:	40000004 	.word	0x40000004

08004b2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <USB_FlushTxFifo+0x64>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e01b      	b.n	8004b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	daf2      	bge.n	8004b3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	019b      	lsls	r3, r3, #6
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a08      	ldr	r2, [pc, #32]	@ (8004b90 <USB_FlushTxFifo+0x64>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e006      	b.n	8004b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d0f0      	beq.n	8004b64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <USB_FlushRxFifo+0x5c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e018      	b.n	8004be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	daf2      	bge.n	8004ba0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a08      	ldr	r2, [pc, #32]	@ (8004bf0 <USB_FlushRxFifo+0x5c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e006      	b.n	8004be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d0f0      	beq.n	8004bc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	00030d40 	.word	0x00030d40

08004bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <USB_CoreReset+0x64>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e01b      	b.n	8004cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	daf2      	bge.n	8004c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <USB_CoreReset+0x64>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e006      	b.n	8004cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d0f0      	beq.n	8004cba <USB_CoreReset+0x36>

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	00030d40 	.word	0x00030d40

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	@ (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f818 	bl	8004d44 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08004d7c 	.word	0x08004d7c
 8004d38:	08004d7c 	.word	0x08004d7c
 8004d3c:	08004d7c 	.word	0x08004d7c
 8004d40:	08004d80 	.word	0x08004d80

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
